
import numpy as np

def G_S(a, b, x, g):   # a - столбец увеличения матрицы коэффициентов b x начальное значение итерации g точность вычисления
    x = x.astype(float)    # Установите точность x, чтобы при вычислении x можно было отображать несколько десятичных знаков
    m, n = a.shape
    times = 0                    # Итерации
    if (m < n):
        print("Есть пространство для решения».")    # Убедитесь, что количество уравнений больше, чем количество неизвестных
    else:
        while True:
            for i in range(n):
                s1 = 0
                tempx = x.copy()        # Записываем ответ последней итерации
                for j in range(n):
                    if i != j:
                        s1 += x[j] * a[i][j]
                x[i] = (b[i] - s1) / a[i][i]
                times += 1                                    # Итерации плюс один
            gap = max(abs(x - tempx))              # Отличие от последнего модуля ответа

            if gap < g:                          # Точность соответствует требованиям, конец
                break

            elif times > 10000:          # Если итерация превышает10000Раз, более
                break
                print("«10000 итераций все равно не сходятся»")

    print(times)
    print(x)


if __name__ == '__main__':            # Когда модуль запускается напрямую, следующие блоки кода будут запущены: Когда модуль импортирован, блоки кода не будут запущены.
    a = np.array([[1,-1,4],[0.5,2,-1],[5,-1,1]])
    b = np.array([2,1,4])
    x = np.array([0, 0, 0])          # Начальное значение итерации
    g = 1e-6                                            # Точность0.000001
    G_S(a, b, x, g)
